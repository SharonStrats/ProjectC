============================================
vis/result.rtx
21:55:39_Thursday_25_May_2017
============================================
Feedback:
Your program ("Nimsys.java") is submitted successfully. :) \n
Tester.java:12: error: no suitable constructor found for NimAIPlayer(no arguments)
			Testable player = new NimAIPlayer();
			                  ^
    constructor NimAIPlayer.NimAIPlayer(String,String,String) is not applicable
      (actual and formal argument lists differ in length)
    constructor NimAIPlayer.NimAIPlayer(String,String,String,Integer,Integer) is not applicable
      (actual and formal argument lists differ in length)
1 error
\tYour program is compiled successfully :) \n
The following are few simple tests and their results.
However, it's your responsibility to test your program more extensively!\n
Note that the program input (including carriage returns) is not displayed
with the program output. The two streams are displayed separately.\n
============================================
Test for input file: in1
removeplayer
y
addplayer george,Washington,George
addplayer jadams,Adams,John
addplayer tom,Jefferson,Thomas
addplayer jmadison,Madison,James
startgame 1,1,george,jadams
1
startgame 1,1,george,jadams
1
startgame 1,1,jadams,tom
1
startgame 1,1,tom,jmadison
1
rankings
exit
\nExpected results:                                                Your results:
Welcome to Nim										Welcome to Nim

$Are you sure you want to remove all players? (y/n)					$Are you sure you want to remove all players? (y/n)

$											$
$											$
$											$
$											$
$											$
Initial stone count: 1									Initial stone count: 1
Maximum stone removal: 1								Maximum stone removal: 1
Player 1: George Washington								Player 1: George Washington
Player 2: John Adams									Player 2: John Adams

1 stones left: *									1 stones left: *
George's turn - remove how many?							George's turn - remove how many?

Game Over										Game Over
John Adams wins!									John Adams wins!

$											$
Initial stone count: 1									Initial stone count: 1
Maximum stone removal: 1								Maximum stone removal: 1
Player 1: George Washington								Player 1: George Washington
Player 2: John Adams									Player 2: John Adams

1 stones left: *									1 stones left: *
George's turn - remove how many?							George's turn - remove how many?

Game Over										Game Over
John Adams wins!									John Adams wins!

$											$
Initial stone count: 1									Initial stone count: 1
Maximum stone removal: 1								Maximum stone removal: 1
Player 1: John Adams									Player 1: John Adams
Player 2: Thomas Jefferson								Player 2: Thomas Jefferson

1 stones left: *									1 stones left: *
John's turn - remove how many?								John's turn - remove how many?

Game Over										Game Over
Thomas Jefferson wins!									Thomas Jefferson wins!

$											$
Initial stone count: 1									Initial stone count: 1
Maximum stone removal: 1								Maximum stone removal: 1
Player 1: Thomas Jefferson								Player 1: Thomas Jefferson
Player 2: James Madison									Player 2: James Madison

1 stones left: *									1 stones left: *
Thomas's turn - remove how many?							Thomas's turn - remove how many?

Game Over										Game Over
James Madison wins!									James Madison wins!

$100% | 01 games | James Madison							$100% | 01 games | James Madison
67%  | 03 games | John Adams								67%  | 03 games | John Adams
50%  | 02 games | Thomas Jefferson							50%  | 02 games | Thomas Jefferson
0%   | 02 games | George Washington							0%   | 02 games | George Washington

$											$
\nYour results seem to be CORRECT.  :)\n
============================================
Test for input file: in2
displayplayer
rankings
exit
\nExpected results:                                                Your results:
Welcome to Nim										Welcome to Nim

$george,George,Washington,2 games,0 wins						$george,George,Washington,2 games,0 wins
jadams,John,Adams,3 games,2 wins							jadams,John,Adams,3 games,2 wins
jmadison,James,Madison,1 games,1 wins							jmadison,James,Madison,1 games,1 wins
tom,Thomas,Jefferson,2 games,1 wins							tom,Thomas,Jefferson,2 games,1 wins

$100% | 01 games | James Madison							$100% | 01 games | James Madison
67%  | 03 games | John Adams								67%  | 03 games | John Adams
50%  | 02 games | Thomas Jefferson							50%  | 02 games | Thomas Jefferson
0%   | 02 games | George Washington							0%   | 02 games | George Washington

$											$
\nYour results seem to be CORRECT.  :)\n
============================================
Test for input file: in3
createplayer lskywalker,Skywalker,Luke
addplayer lskywalker
addplayer lskywalker,Skywalker,Luke
exit
\nExpected results:                                                Your results:
Welcome to Nim										Welcome to Nim

$'createplayer' is not a valid command.							$'createplayer' is not a valid command.

$Incorrect number of arguments supplied to command.					$Incorrect number of arguments supplied to command.

$											$
$											$
\nYour results seem to be CORRECT.  :)\n
============================================
(NOTE: This test is for the implmentation of AI player.
The output is not compared with any expected output here.
This test is just used to verify that your AI players are working)\n
Test for input file: in_aibasic
addaiplayer robot1,Smith,John
addaiplayer robot2,Smith,Jane
startgame 20,4,robot1,robot2
exit

Welcome to Nim

$
$
$
Initial stone count: 20
Maximum stone removal: 4
Player 1: John Smith
Player 2: Jane Smith

20 stones left: * * * * * * * * * * * * * * * * * * * *
John's turn - remove how many?

16 stones left: * * * * * * * * * * * * * * * *
Jane's turn - remove how many?

12 stones left: * * * * * * * * * * * *
John's turn - remove how many?

8 stones left: * * * * * * * *
Jane's turn - remove how many?

4 stones left: * * * *
John's turn - remove how many?

Game Over
Jane Smith wins!

$
============================================
(NOTE: This test is for victory guaranteed strategy of AI player
Test for input file: in_aivictory
removeplayer
y
addplayer lskywalker,Skywalker,Luke
addaiplayer artoo,D2,R2
startgame 30,5,artoo,lskywalker
1
2
3
4
1
rankings
exit
\nExpected results:                                                Your results:
Welcome to Nim										Welcome to Nim

$Are you sure you want to remove all players? (y/n)					$Are you sure you want to remove all players? (y/n)

$											$
$											$
$											$
Initial stone count: 30									Initial stone count: 30
Maximum stone removal: 5								Maximum stone removal: 5
Player 1: R2 D2										Player 1: R2 D2
Player 2: Luke Skywalker								Player 2: Luke Skywalker

30 stones left: * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *		30 stones left: * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
R2's turn - remove how many?								R2's turn - remove how many?

25 stones left: * * * * * * * * * * * * * * * * * * * * * * * * *			25 stones left: * * * * * * * * * * * * * * * * * * * * * * * * *
Luke's turn - remove how many?								Luke's turn - remove how many?

24 stones left: * * * * * * * * * * * * * * * * * * * * * * * *				24 stones left: * * * * * * * * * * * * * * * * * * * * * * * *
R2's turn - remove how many?								R2's turn - remove how many?

19 stones left: * * * * * * * * * * * * * * * * * * *					19 stones left: * * * * * * * * * * * * * * * * * * *
Luke's turn - remove how many?								Luke's turn - remove how many?

17 stones left: * * * * * * * * * * * * * * * * *					17 stones left: * * * * * * * * * * * * * * * * *
R2's turn - remove how many?								R2's turn - remove how many?

13 stones left: * * * * * * * * * * * * *					      |	12 stones left: * * * * * * * * * * * *
Luke's turn - remove how many?								Luke's turn - remove how many?

10 stones left: * * * * * * * * * *						      |	9 stones left: * * * * * * * * *
R2's turn - remove how many?								R2's turn - remove how many?

7 stones left: * * * * * * *							      |	4 stones left: * * * *
Luke's turn - remove how many?							      <
										      <
3 stones left: * * *								      <
R2's turn - remove how many?							      <
										      <
1 stones left: *								      <
Luke's turn - remove how many?								Luke's turn - remove how many?

Game Over										Game Over
R2 D2 wins!										R2 D2 wins!

										      >	$'' is not a valid command.
										      >
										      >	$'1' is not a valid command.
										      >
$100% | 01 games | R2 D2								$100% | 01 games | R2 D2
0%   | 01 games | Luke Skywalker							0%   | 01 games | Luke Skywalker

$											$
\nOops, your results seem to be INCORRECT.  :(\n
============================================
This test is for the implmentation of the advanced Nim game.
Test for input file: in_advanced
removeplayer
y
addplayer george,Washington,George
addplayer jadams,Adams,John
addplayer tom,Jefferson,Thomas
addplayer jmadison,Madison,James
startadvancedgame 5,george,jadams
2 2
4 1
1 1
5 1
startadvancedgame 7,george,jadams
4 1
2 2
6 2
1 1
5 1
startadvancedgame 9,jadams,tom
8 2
4 1
3 1
5 1
1 1
6 1
2 1
7 1
startadvancedgame 11,tom,jmadison
2 2
10 2
5 2
8 2
4 1
1 1
7 1
rankings
exit
\nExpected results:                                                Your results:
Welcome to Nim										Welcome to Nim

$Are you sure you want to remove all players? (y/n)					$Are you sure you want to remove all players? (y/n)

$											$
$											$
$											$
$											$
$										      |	$'startadvancedgame' is not a valid command.
Initial stone count: 5								      <
Stones display: <1,*> <2,*> <3,*> <4,*> <5,*>					      <
Player 1: George Washington							      <
Player 2: John Adams								      <
										      <
5 stones left: <1,*> <2,*> <3,*> <4,*> <5,*>					      <
George's turn - which to remove?						      <
										      <
3 stones left: <1,*> <2,x> <3,x> <4,*> <5,*>					      <
John's turn - which to remove?							      <
										      <
2 stones left: <1,*> <2,x> <3,x> <4,x> <5,*>					      <
George's turn - which to remove?						      <

1 stones left: <1,x> <2,x> <3,x> <4,x> <5,*>					      |	$'2' is not a valid command.
John's turn - which to remove?							      <

Game Over									      |	$'4' is not a valid command.
John Adams wins!								      <

$										      |	$'1' is not a valid command.
Initial stone count: 7								      <
Stones display: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*>			      <
Player 1: George Washington							      <
Player 2: John Adams								      <
										      <
7 stones left: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*>			      <
George's turn - which to remove?						      <

6 stones left: <1,*> <2,*> <3,*> <4,x> <5,*> <6,*> <7,*>			      |	$'5' is not a valid command.
John's turn - which to remove?							      <

4 stones left: <1,*> <2,x> <3,x> <4,x> <5,*> <6,*> <7,*>			      |	$'startadvancedgame' is not a valid command.
George's turn - which to remove?						      <

2 stones left: <1,*> <2,x> <3,x> <4,x> <5,*> <6,x> <7,x>			      |	$'4' is not a valid command.
John's turn - which to remove?							      <

1 stones left: <1,x> <2,x> <3,x> <4,x> <5,*> <6,x> <7,x>			      |	$'2' is not a valid command.
George's turn - which to remove?						      <

Game Over									      |	$'6' is not a valid command.
George Washington wins!								      <

$										      |	$'1' is not a valid command.
Initial stone count: 9								      <
Stones display: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*>		      <
Player 1: John Adams								      <
Player 2: Thomas Jefferson							      <

9 stones left: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*>		      |	$'5' is not a valid command.
John's turn - which to remove?							      <

7 stones left: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,x> <9,x>		      |	$'startadvancedgame' is not a valid command.
Thomas's turn - which to remove?						      <

6 stones left: <1,*> <2,*> <3,*> <4,x> <5,*> <6,*> <7,*> <8,x> <9,x>		      |	$'8' is not a valid command.
John's turn - which to remove?							      <

5 stones left: <1,*> <2,*> <3,x> <4,x> <5,*> <6,*> <7,*> <8,x> <9,x>		      |	$'4' is not a valid command.
Thomas's turn - which to remove?						      <

4 stones left: <1,*> <2,*> <3,x> <4,x> <5,x> <6,*> <7,*> <8,x> <9,x>		      |	$'3' is not a valid command.
John's turn - which to remove?							      <

3 stones left: <1,x> <2,*> <3,x> <4,x> <5,x> <6,*> <7,*> <8,x> <9,x>		      |	$'5' is not a valid command.
Thomas's turn - which to remove?						      <

2 stones left: <1,x> <2,*> <3,x> <4,x> <5,x> <6,x> <7,*> <8,x> <9,x>		      |	$'1' is not a valid command.
John's turn - which to remove?							      <

1 stones left: <1,x> <2,x> <3,x> <4,x> <5,x> <6,x> <7,*> <8,x> <9,x>		      |	$'6' is not a valid command.
Thomas's turn - which to remove?						      <

Game Over									      |	$'2' is not a valid command.
Thomas Jefferson wins!								      <

$										      |	$'7' is not a valid command.
Initial stone count: 11								      <
Stones display: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*> <10,*> <11,*>   <
Player 1: Thomas Jefferson							      <
Player 2: James Madison								      <

11 stones left: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*> <10,*> <11,*>   |	$'startadvancedgame' is not a valid command.
Thomas's turn - which to remove?						      <

9 stones left: <1,*> <2,x> <3,x> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*> <10,*> <11,*>    |	$'2' is not a valid command.
James's turn - which to remove?							      <

7 stones left: <1,*> <2,x> <3,x> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*> <10,x> <11,x>    |	$'10' is not a valid command.
Thomas's turn - which to remove?						      <

5 stones left: <1,*> <2,x> <3,x> <4,*> <5,x> <6,x> <7,*> <8,*> <9,*> <10,x> <11,x>    |	$'5' is not a valid command.
James's turn - which to remove?							      <

3 stones left: <1,*> <2,x> <3,x> <4,*> <5,x> <6,x> <7,*> <8,x> <9,x> <10,x> <11,x>    |	$'8' is not a valid command.
Thomas's turn - which to remove?						      <

2 stones left: <1,*> <2,x> <3,x> <4,x> <5,x> <6,x> <7,*> <8,x> <9,x> <10,x> <11,x>    |	$'4' is not a valid command.
James's turn - which to remove?							      <

1 stones left: <1,x> <2,x> <3,x> <4,x> <5,x> <6,x> <7,*> <8,x> <9,x> <10,x> <11,x>    |	$'1' is not a valid command.
Thomas's turn - which to remove?						      <

Game Over									      |	$'7' is not a valid command.
Thomas Jefferson wins!								      <

$100% | 02 games | Thomas Jefferson						      |	$0%   | 00 games | George Washington
50%  | 02 games | George Washington						      |	0%   | 00 games | John Adams
33%  | 03 games | John Adams							      |	0%   | 00 games | James Madison
0%   | 01 games | James Madison							      |	0%   | 00 games | Thomas Jefferson

$											$
\nOops, your results seem to be INCORRECT.  :(\n
============================================
This test is for the victory guaranteed strategy for the advanced Nim game.
Your solution is correct if it outputs 100% winning ratios in all cases.\n\n
============================================
============================================
src/NimGame.java
21:55:36_Thursday_25_May_2017
============================================
/* Author: 	Sharon Stratsianis
 * Subject: COMP90041
 * Tutorial:Monday 9am
 * Date:	04/05/2017
 * Project:	B
 */
import java.util.Scanner;
/* Class: 				NimGame
 * Description: 		This class plays a game of Nim, given game details of Stones, max stone removal, and two players.
 * Instance Variables: 	player1, player2: 	NimPlayers
 * 						curStoneCount:		Integer, Number of stones to start with
 * 						maxRemoval:			Integer, max number to be removed at a time.
 * Public Methods:		PlayGame()
 * Private Methods:		PrintStones(), to print the stones left.
 * 						Swap(), to swap players on each turn.
*/
public class NimGame 
{
	private NimPlayer player1;
	private NimPlayer player2;
	private Integer numStones;
	private Integer maxRemoval;
	private static NimPlayer curPlayer;
	
	// Constructor: needs all instance variables to be defined by user.
	NimGame(NimPlayer player1, NimPlayer player2, Integer curStoneCount, Integer maxRemoval) 
	{
		this.player1 = player1;
		this.player2 = player2;
		this.numStones = curStoneCount;
		this.maxRemoval = maxRemoval;
		
	}
	
	//Playgame: controls the details of the game. 
	// Returns the winner
	public static NimPlayer PlayGame(NimGame game) 
	{
		System.out.println("");
		System.out.println("Initial stone count: " + game.numStones);	
		System.out.println("Maximum stone removal: " + game.maxRemoval);	
		System.out.println("Player 1: " + game.player1.GetName() + " " + game.player1.GetFamilyName());				    
		System.out.println("Player 2: " + game.player2.GetName() + " " + game.player2.GetFamilyName());	
		System.out.println("");
		
			curPlayer = game.player1;
			int player = 0;
			int numToRemove = 0;
			
			while (game.numStones > 0)  
			{
			
				PrintStones(game.numStones);
				if (curPlayer.getClass().toString().equals("class NimAIPlayer")) {
					numToRemove = NimAIPlayer.RemoveStone(curPlayer.GetName(),game.maxRemoval,game.numStones);
				}
				else {
					numToRemove = NimPlayer.RemoveStone(curPlayer.GetName(),game.maxRemoval,game.numStones);
				}
				
				if (numToRemove != 0) 
				{
					game.numStones = (game.numStones - numToRemove);
					System.out.println();
					// going to next player
					curPlayer = Swap(curPlayer,game.player1, game.player2);
						
					//we have a winner
					if (game.numStones <= 0) 
					{
						System.out.println("Game Over");
						System.out.println(curPlayer.GetName() + " " + curPlayer.GetFamilyName() + " wins!");
						System.out.println();	
						if (curPlayer.getClass().toString().equals("class NimHumanPlayer")) {
							String extra = Nimsys.sc.nextLine();
					}}
				}
			} 
			return curPlayer;	
		}
		
	// PrintStones:  prints how many stones are left.	
	private static void PrintStones(Integer numStones) 
	{
		System.out.print(numStones + " stones left:");
		for (int i = 1; i <= numStones; i++) 
		{
			System.out.print(" *");
			if (i == numStones) 
			{
				System.out.println();
			}
		}
	}
	//Swap: Swaps players to return current player.
	private static NimPlayer Swap(NimPlayer current, NimPlayer player1, NimPlayer player2) 
	{
		if (player1.GetName().equals(current.GetName())) 
		{
			return player2;
		}
		else 
		{
			return player1;
		}
	}

}
============================================
src/NimHumanPlayer.java
21:55:36_Thursday_25_May_2017
============================================

public class NimHumanPlayer extends NimPlayer {
	
	public NimHumanPlayer(String userName, String name, String familyName){
	super(userName, name, familyName);
	}
	public NimHumanPlayer(String userName, String name, String familyName, Integer gamesPlayd, Integer gamesWon){
	super(userName, name, familyName, gamesPlayd, gamesWon);
	}
	
	public static NimPlayer[] AddPlayer(NimPlayer[] players, Integer count, String playerDetails) {
		String[] details = new String[3];
		details = playerDetails.split(",");

		NimPlayer newPlayer = new NimHumanPlayer(details[0].toString(), details[2].toString(), details[1].toString());
			players[count] = newPlayer;
		return players;
	}
	
	public static NimPlayer[] AddPlayerWithStats(NimPlayer[] players, Integer count, String playerDetails) 
	{
		String[] details = new String[7];
		details = playerDetails.split(" ");
		Integer playd = Integer.parseInt(details[5]);
		Integer won = Integer.parseInt(details[6]);
        
		NimPlayer newPlayer = new NimHumanPlayer(details[2].toString(), details[4].toString(), details[3].toString(),playd, won);
		players[count-1] = newPlayer;
		return players;
}}
============================================
src/NimAIPlayer.java
21:55:36_Thursday_25_May_2017
============================================
/*
	NimAIPlayer.java
	
	This class is provided as a skeleton code for the tasks of 
	Sections 2.3, 2.4 and 2.5 in Project C. Add code (do NOT delete any) to it
	to finish the tasks. 
	
	Coded by: Jin Huang
	Modified by: Jianzhong Qi, 29/04/2015
*/

public class NimAIPlayer extends NimPlayer implements Testable {
	// you may further extend a class or implement an interface
	// to accomplish the task in Section 2.3	

	public NimAIPlayer(String userName, String name, String familyName) {
		super(userName, name, familyName);	
	}
	public NimAIPlayer(String userName, String name, String familyName, Integer gamesPlayd, Integer gamesWon){
	super(userName, name, familyName, gamesPlayd, gamesWon);
	}
	public static NimPlayer[] AddPlayer(NimPlayer[] players, Integer count, String playerDetails) {
		String[] details = new String[3];
		details = playerDetails.split(",");

		NimPlayer newPlayer = new NimAIPlayer(details[0].toString(), details[2].toString(), details[1].toString());
			players[count] = newPlayer;
		return players;
	}
	public String advancedMove(boolean[] available, String lastMove) {
		// the implementation of the victory
		// guaranteed strategy designed by you
		String move = "";
		
		return move;
	}
	public static NimPlayer[] AddPlayerWithStats(NimPlayer[] players, Integer count, String playerDetails) 
	{
		String[] details = new String[7];
		details = playerDetails.split(" ");
		Integer playd = Integer.parseInt(details[5]);
		Integer won = Integer.parseInt(details[6]);
        
		NimPlayer newPlayer = new NimAIPlayer(details[2].toString(), details[4].toString(), details[3].toString(),playd, won);
		players[count-1] = newPlayer;
		return players;
}
	//RemoveStone: Remove the stones for the NimGame, checking against the max number
	//@override
		public static int RemoveStone(String player,  int max, int total) 
		{   double k;
			System.out.println(player + "'s turn - remove how many?");
			Integer numToRemove;
			int newTotal;
			k = total-1/(max +1 );
			for (int i = max; i>=1;i--) {
				newTotal = total - i;
				k = (newTotal-1)/(max+1);
				if (newTotal-1/(max+1) % 1 == 0) {
					return i;
				}
			}
			return max;
		}
}============================================
src/Nimsys.java
21:55:36_Thursday_25_May_2017
============================================
/* Author: 	Sharon Stratsianis
 * Subject: COMP90041
 * Tutorial:Monday 9am
 * Date:	04/05/2017
 * Project:	B
 */
import java.util.Scanner;
import java.io.PrintWriter;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.File;


/* Class: 				Nimsys
 * Description: 		This class is the main class to create a player list and play NimGames
 * Instance Variables: 	sc:Scanner scanner to receive commands from user
 * Public Methods:		main(String[] args): void
 * Private Methods:		DisplayPlayer(NimPlayer[] players, Integer count, String command): void
 * 						Rankings(NimPlayer[] players, Integer count, String sort): void
 * 						StartGame(NimPlayer[] players, Integer count, String command): NimPlayer[]
 * 						ProcessCommand(String input): String[]
 * 						GetPlayer(NimPlayer[] players, Integer count,String playerName): NimPlayer
 * 						CheckPlayerExists(NimPlayer[] players, Integer count, String userName): Boolean
*/


public class Nimsys 
{

	public static Scanner sc;
	public static Scanner streamObject;
	private static NimGame game;
	private static NimPlayer[] players = new NimPlayer[100]; 
	private static int numOfPlayers = 0; 
	private static Boolean resetAll = false;
	Boolean correctArg;

	private static Boolean exists;

	Nimsys(Scanner streamObject, String fileName) 
	{
		try {
			Nimsys.streamObject = new Scanner(new FileInputStream(fileName));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	Nimsys(Scanner sc)
	{
		Nimsys.sc = new Scanner(System.in);
	}
	
	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub
		//File f = null;
		String userInput;
		String[] userCommand;
		System.out.println("Welcome to Nim");
		System.out.println();
		sc = new Scanner(System.in);
		
        // Get the players
      //  game = new NimGame();
        Boolean userExit = false;
        
        // loading from file

        File file = new File("players.dat");
        
        if (file.exists()) {
        try 
        {
        	// read from the file
            Scanner fileScanner = new Scanner(file);
        	while (fileScanner.hasNextLine()) {
        		String playerDetails = fileScanner.nextLine();	 
        		String[] details = new String[5];
        		details = playerDetails.split(" ");
        		numOfPlayers++;
        		if (details[1].equals("NimHumanPlayer")) {
        			NimHumanPlayer.AddPlayerWithStats(players, numOfPlayers, playerDetails);
        		}
        		else {
        			NimAIPlayer.AddPlayerWithStats(players, numOfPlayers, playerDetails);
        		}
        			
        	}
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();

        }
        }
// Main instructions of running game.        
        
        while(!userExit) 
        {
        	try {
        	System.out.print("$");
        	userInput = sc.nextLine();

        	userCommand = ProcessCommand(userInput);
    
        	if (!userCommand[0].toString().isEmpty()) 
        	{
        		
        		switch(userCommand[0].toLowerCase()) 
        		{
			
        		case "addplayer" : 
        			Boolean correctArg = CheckArguments(userCommand);
        			try {
        				
        			if (correctArg) {
        				String[] commandDetails = userCommand[1].split(",");
        				exists = CheckPlayerExists(players,numOfPlayers,commandDetails[0]);		
        				if (!exists) {	
        					players = NimHumanPlayer.AddPlayer(players, numOfPlayers , userCommand[1].toString());
        					numOfPlayers++;
        				}
        				else 
        				{
        					System.out.println("The player already exists.");	
        				}
        				System.out.println("");
        			}
        			else {
        				throw new Exception(" ");
        			}}
        			catch (Exception e) {
        				System.out.println("");
        				break;
        			}
        			break;
        		case "addaiplayer" :
        			correctArg = CheckArguments(userCommand);
        			try {
        				if (correctArg) {
        					String[] commandDetails1 = userCommand[1].split(",");
        					exists = CheckPlayerExists(players,numOfPlayers,commandDetails1[0]);
        					if (!exists) {
        					players = NimAIPlayer.AddPlayer(players, numOfPlayers , userCommand[1].toString());
        					numOfPlayers++;
        					}
            				else 
            				{
            					System.out.println("The player already exists.");	
            				}
        					System.out.println("");
        					}
        				else {
        					throw new Exception(" ");
        					}
        				} catch (Exception e) {
        					System.out.println("");
            				break;
        				}
        					
        					break;
        		case "removeplayer" :
        			if (userCommand.length > 1) 
        			{
        				exists = CheckPlayerExists(players, numOfPlayers, userCommand[1].toString());
				
        				if (exists) 
        				{
        					players = NimPlayer.RemovePlayer(players, numOfPlayers, userCommand[1].toString());
        					numOfPlayers--;
        				}
        				else 
        				{
        					System.out.println("The player does not exist.");
        				}
        			}
        			else 
        			{
        				System.out.println("Are you sure you want to remove all players? (y/n)");
        				String sure = sc.nextLine(); 
        				if (sure.toLowerCase().contentEquals("y")) 
        				{
        					numOfPlayers = 0;
        				}
        			}
        			System.out.println("");
        			break;
        		case "editplayer" :
        			String[] commandDetails2 = userCommand[1].split(",");
        			exists = CheckPlayerExists(players,numOfPlayers,commandDetails2[0]);		
        			if (exists) 
        			{
        				players = NimPlayer.EditPlayer(players,numOfPlayers,userCommand[1].toString());
        			}
        			else 
        			{
        				System.out.println("The player does not exist.");	
        			}
        			System.out.println("");
        			break;
        		case "resetstats" :
        			if (userCommand.length > 1) 
        			{
        				exists = CheckPlayerExists(players,numOfPlayers, userCommand[1].toString());
            			if (exists) 
            			{
            				players = NimPlayer.ResetStats(players,numOfPlayers, userCommand[1].toString(), resetAll);
            			}
            			else 
            			{
            				System.out.println("The player does not exist.");	
            			}
        			}
        			else 
        			{
        				System.out.println("Are you sure you want to reset all player statistics? (y/n)");
        				String sure = sc.nextLine(); 
        				if (sure.toLowerCase().contentEquals("y")) 
        				{
        					resetAll = true;
        					players = NimPlayer.ResetStats(players,numOfPlayers," ", resetAll);
        					resetAll = false;
        				}
        			}
        			System.out.println("");
        			break;
        		case "displayplayer" :      		
        			if (userCommand.length > 1) 
        			{
        				DisplayPlayer(players, numOfPlayers, userCommand[1].toString());
        			}
        			else 
        			{
        				if (numOfPlayers > 0) 
        				{
        					DisplayPlayer(players, numOfPlayers, "");
        				}
        			}	
        			System.out.println("");
        			break;
        		case "rankings" :
        			if (userCommand.length > 1) 
        			{
        				Rankings(players, numOfPlayers, userCommand[1].toString());
        			}
        			else 
        			{
        				Rankings(players, numOfPlayers, "desc");
        			}
        			break;
        		case "startgame" :
        			players = StartGame(players,numOfPlayers, userCommand[1].toString());
        			break;
        		case "exit" : 
        			userExit = true;
        			//Write output to a file.
        			WriteOutput(players,numOfPlayers);
        			System.out.println("");
        			System.exit(0);
        			break;
        		default :
        			System.out.println("");
        			throw new Exception("'" + userCommand[0].toString() + "' is not a valid command.");
        		} 
        		}} catch (Exception e) {
        			String message = e.getMessage();
        			System.out.println("");
        		}
        		finally {

        		}
        	}
	
        }
	
// WriteOutput:  Output player stats to a file
	private static void WriteOutput(NimPlayer[] players, Integer count) {
		try 
		{
		PrintWriter outputStream = null;
		outputStream = new PrintWriter(new FileOutputStream("players.dat"));
		  for (int i = 0; i < count; i++ ) 
	        {
	        	if (players[i] != null) 
	        	{
	        	
	            	outputStream.println(players[i].getClass().toString() + " " + players[i].GetUserName()  + " " + players[i].GetFamilyName()+ " " + players[i].GetName()  + " "  + players[i].GetGamesPlayd() + " " + players[i].GetGamesWon());	
	        		
	        	}
	        }
		  outputStream.close();
		}
		catch (FileNotFoundException e)
		{
			System.out.println("File not Found");
		}
	}
	//DisplayPlayer: Display one or all players
	private static void DisplayPlayer(NimPlayer[] players, Integer count, String command) 
	{
		Boolean exists = false;
		if (!command.isEmpty()) 
		{
			exists = CheckPlayerExists(players, count, command);
		} 
		else 
		{
			players = NimPlayer.DisplaySort(players, count);
		}
		if ((exists) || (command.isEmpty())) 
		{
			NimPlayer.DisplayPlayer(players, count, command);
		}
		else 
		{
			System.out.println("The player does not exist.");	
		}
		
	}
	//Rankings: Sort default is desc, if asc print in reverse
	//			Max to print is 10
	private static void Rankings(NimPlayer[] players, Integer count, String sort) 
	{
		String percent = "";
		//this sort based on parameter passed asc or desc
	
		//print and sort only 10
		if (count > 10) 
		{
			count = 10;
		}
		// need to sort
		players = NimPlayer.RankSort(players, count);
		if (sort.isEmpty() || sort.equals("desc")) 
		{
			for (int i = 0; i < count; i++)
			{	
				Integer rankTemp = (int) Math.round(players[i].GetRank());
				percent = rankTemp.toString() + "%";
				System.out.printf("%-5.5s| %02d games | %s %s%n", percent, players[i].GetGamesPlayd(), players[i].GetName(), players[i].GetFamilyName());
			}
		}
		else 
		{
			for (int i = count-1; i < count; i--)
			{
				Integer rankTemp = (int) Math.round(players[i].GetRank());
				percent = rankTemp.toString() + "%";
				System.out.printf("%-5.5s| %02d games | %s %s%n" , percent, players[i].GetGamesPlayd(), players[i].GetName(), players[i].GetFamilyName());
			}
		}
			System.out.println("");
	}
	//Startgame: 	prepares the players and starts the NimGame
	//				Updates stats for playing and winning
	private static NimPlayer[] StartGame(NimPlayer[] players, Integer count, String command) 
	{	
		String[] curPlayers = command.split(",");
		int stones = Integer.parseInt(curPlayers[0].toString());
		int upper = Integer.parseInt(curPlayers[1].toString());
		if ((CheckPlayerExists(players, numOfPlayers, curPlayers[2])) && (CheckPlayerExists(players, numOfPlayers, curPlayers[3]))) 
		{
			NimPlayer player1 = GetPlayer(players, numOfPlayers, curPlayers[2]);
			NimPlayer player2 = GetPlayer(players, numOfPlayers, curPlayers[3]);
			players = NimPlayer.UpdateGameStats(players, numOfPlayers, player1);
			players = NimPlayer.UpdateGameStats(players, numOfPlayers, player2);
			NimGame game = new NimGame(player1, player2, stones, upper);
			NimPlayer winner = NimGame.PlayGame(game);
			players = NimPlayer.UpdateWonStats(players, numOfPlayers, winner);
		}
		else 
		{
			System.out.println("One of the players does not exist.");
			System.out.println("");
		}
		return players;
	}
	//ProcessCommand: Split the command and return the command
	private static String[] ProcessCommand(String input) 
	{
		//First spot will have command
		//Second spot will have arguments
		String[] commandDetails = input.split(" ");
		
		Boolean valid = CheckCommand(commandDetails);
		if (valid) 
		{
			return commandDetails;
		}
		else {
			return new String[0];
		}
	}
	//CheckCommand:  Check to make sure the user has entered a correct command
	private static Boolean CheckCommand(String[] command)
	{
		//if string compare - is equal return true else return false
		try {
		if ((command[0].toLowerCase().equals("addplayer")) || command[0].toLowerCase().equals("addaiplayer")  || command[0].toLowerCase().equals("editplayer") || command[0].toLowerCase().equals("displayplayer") || command[0].toLowerCase().equals("removeplayer") || command[0].toLowerCase().equals("resetstats")  || command[0].toLowerCase().equals("startgame") || command[0].toLowerCase().equals("rankings") || command[0].toLowerCase().equals("exit")){
			return true;
		} 
			throw new Exception("'" + command[0].toString() + "' is not a valid command.");
		}
		catch (Exception e) {
			String message = e.getMessage();
			System.out.println(message);
			return false;
		}
		}
	private static Boolean CheckArguments(String[] command) {

		String[] details = command[1].split(",");
		try {
		if (command[0].toLowerCase().equals("addplayer") || command[0].toLowerCase().equals("addaiplayer") || command[0].toLowerCase().equals("editplayer")) {
			if (details.length < 3) {
				throw new Exception("Incorrect number of arguments supplied to command.");
		}
			else {
				return true;
			}
		}
		// need to check the others.....
		else if (command[0].toLowerCase().equals("addplayer") || command[0].toLowerCase().equals("addaiplayer") || command[0].toLowerCase().equals("editplayer")) {
			if (command.length < 4) {
				throw new Exception("Incorrect number of arguments supplied to command.");
		}}}
		catch (Exception e) {
			String message = e.getMessage();
			System.out.println(message);
			return false;
		}
	return false;	
	}
	//GetPlayer: Get the details of the player that is playing the game.
	private static NimPlayer GetPlayer(NimPlayer[] players, Integer count,String playerName) 
	{
		Boolean found = false;
		int i = 0;
		while (!found) 
		{
			if (players[i].GetUserName().equals(playerName)) 
			{
				found = true;
			}
			i++;
		}	
		return players[i-1];
	}
	
	private static Boolean CheckPlayerExists(NimPlayer[] players, Integer count, String userName) 
	{
		Boolean found = false;

		if (count == 0) 
		{
			return found;
		} 
		else 
		{
			for (int i = 0; i < count; i++) 
			{
				if (players[i] != null) 
				{
					if (players[i].GetUserName().equals(userName)) 
					{
						found = true;
						break;
					} 
				} else 
				{
					return found;
				}
			} 
		}
		return found;
		
	}
}
============================================
src/NimPlayer.java
21:55:36_Thursday_25_May_2017
============================================
/* Author: 	Sharon Stratsianis
 * Subject: COMP90041
 * Tutorial:Monday 9am
 * Date:	04/05/2017
 * Project:	B
 */

import java.util.Arrays;
import java.util.Scanner;
/* Class: 				NimPlayer
 * Description: 		Creates a player for a NimGame.  Stores their stats, along with their personal details.
 * 						Contains all methods to deal with a player, adding, removing, display, etc.  see below for all
 * 						public methods.
 * Instance Variables:	userName: 	String, User Name
 * 						name:		String, First name
 * 						familyName:	String, Last name
 * 						gamesPlayd:	Integer, Total games played
 * 						gamesWon:	Integer, Total games won
 * 						rank:		Integer, Stores percentage as an integer.  Will round to store value.
 * Public Methods:		RemoveStone(String player,  int max): Int
 * 						AddPlayer(NimPlayer[] players, Integer count, String playerDetails): NimPlayer[]
 * 						EditPlayer(NimPlayer[] players, Integer count, String playerDetails):NimPlayer[]
 * 						ResetStats(NimPlayer[] players, Integer count, String player, Boolean resetAll): NimPlayer[]
 * 						DisplayPlayer(NimPlayer[] players, Integer count, String user): void
 * 						UpdateGameStats(NimPlayer[] players, Integer count, NimPlayer player): NimPlayer[]
 * 						UpdateWonStats(NimPlayer[] players, Integer count, NimPlayer winner): NimPlayer[]
 * 						RankSort(NimPlayer[] players, Integer count): NimPlayer[]
 * 						DisplaySort(NimPlayer[] players, Integer count): NimPlayer[]
 * Private Methods:		Insert(NimPlayer[] players, Integer count, NimPlayer insPlayer, Integer index):NimPlayer[]
 * 						
 * 
 * 						
 */
public abstract class NimPlayer 
{
	private String userName;
	private String name;
	private String familyName;
	private Integer gamesPlayd; 
	private Integer gamesWon;
	private Double rank;
	
	NimPlayer() {
		userName = " ";
		name = " ";
		familyName = " ";
		gamesPlayd = 0; 
		gamesWon = 0;
		rank = 0.0;
	}
	NimPlayer(String userName, String name, String familyName) 
	{
		this.userName = userName;
		this.name = name;
		this.familyName = familyName;
		this.gamesPlayd = 0;
		this.gamesWon = 0;
		this.rank = 0.0;
	}
	NimPlayer(String userName, String name, String familyName, Integer gamesPlayd, Integer gamesWon) {
		this.userName = userName;
		this.name = name;
		this.familyName = familyName;
		this.gamesPlayd = gamesPlayd;
		this.gamesWon = gamesWon;
		this.rank = (double) Math.round(((double) gamesWon/(double) gamesPlayd * 100));;
	}
	//Getters
	public String GetUserName() {
		return this.userName;
	}
	public String GetName() {
		return this.name;
	}
	public String GetFamilyName() {
		return this.familyName;
	}
	public Integer GetGamesPlayd() {
		return this.gamesPlayd;
	}
	public Integer GetGamesWon() {
		return this.gamesWon;
	}
	public Double GetRank() {
		return this.rank;
	}
	//RemoveStone: Remove the stones for the NimGame, checking against the max number
	public static int RemoveStone(String player,  int max, int total) 
	{
		System.out.println(player + "'s turn - remove how many?");
		Integer numRemove = Nimsys.sc.nextInt();
		try {
			if (numRemove == 0) 
				{
			throw new Exception("Invalid move. You must remove between 1 and 1 stones.");
		}
			else if  (numRemove > max)  
		{
			throw new Exception("Invalid move. You must remove between 1 and " + max + " stones.");
			}
			else {
				return numRemove;
			}
		 } catch (Exception e) {
			 System.out.println("");
			 String message = e.getMessage();
			 System.out.println("");
			 return 0; 
		}
		
	}
	//**********************************************************************************
	//AddPlayer:  Add a player at the end
	// This method will be implemented in HumanPlayer and AI Player
	//public static NimPlayer[] AddPlayer(NimPlayer[] players, Integer count, String playerDetails) 
	//{
	//	String[] details = new String[3];
	//	details = playerDetails.split(",");

	//	NimPlayer newPlayer = new NimPlayer(details[0].toString(), details[2].toString(), details[1].toString());
	//	players[count] = newPlayer;
	//	return players;
	//}
	//AddPlayer:  Add a player at the end
//	public static NimPlayer[] AddPlayerWithStats(NimPlayer[] players, Integer count, String playerDetails) 
	//{
	//	String[] details = new String[5];
	//	details = playerDetails.split(",");
	//	Integer playd = Integer.parseInt(details[3]);
	//	Integer won = Integer.parseInt(details[4]);
        
	//	NimPlayer newPlayer = new NimPlayer(details[0].toString(), details[2].toString(), details[1].toString(),playd, won);
	//	players[count-1] = newPlayer;
	//	return players;
	//}
	
	//************************************************************
	//RemovePlayer: Remove a player
	public static NimPlayer[] RemovePlayer(NimPlayer[] players,Integer count, String playerDetails) 
	{
		Boolean found = false;
		
        for (int i = 0; i < count; i++ ) 
        {
        	if (players[i] != null) {
        		if ((players[i].userName.equals(playerDetails)) || found) 
        		{
        		//redo the array and delete
        			found = true;
        			if (players[i+1] != null) 
        			{
        				players[i].userName = players[i+1].userName;
        				players[i].name = players[i+1].name;
        				players[i].familyName = players[i+1].familyName;
        				players[i].gamesPlayd = players[i+1].gamesPlayd;
        				players[i].gamesWon = players[i+1].gamesWon;
        				players[i].rank = players[i+1].rank;
        			} else 
        			{
        				players[i].userName = "";
        				players[i].name = "";
        				players[i].familyName = "";
        				players[i].gamesPlayd = 0;
        				players[i].gamesWon = 0;
        				players[i].rank = 0.0;
        			}
        		}    
        	}
        }
		return players;
	}
	//EditPlayer: Edit players name and familyName
	public static NimPlayer[] EditPlayer(NimPlayer[] players, Integer count, String playerDetails) 
	{
		String[] details = new String[3];
		details = playerDetails.split(",");
        for (int i = 0; i < count; i++ ) 
        {
        	if (players[i] != null) 
        	{
        		if (players[i].userName.equals(details[0])) 
        		{
        			players[i].name = details[2];
        			players[i].familyName = details[1];   		
        		}
        	}
        }
        return players;
		
	}
	//ResetStats: Reset stats for all or one player
	public static NimPlayer[] ResetStats(NimPlayer[] players, Integer count, String player, Boolean resetAll) 
	{
	    	
		if (resetAll) {
			for (int i = 0; i < count; i++ ) 
			{
				if (players[i] != null) 
				{
					players[i].gamesPlayd = 0;
					players[i].gamesWon = 0;
					players[i].rank = 0.0;
				}
			}
		}
		else 
		{
			for (int i = 0; i < count; i++ ) 
			{
				if (players[i].userName.equals(player)) 
				{
					players[i].gamesPlayd = 0;
					players[i].gamesWon = 0;							
					players[i].rank = 0.0;				
				}
			}   	    	
        }
        return players;
		
	}
	//DisplayPlayer: Display a player
	public static void DisplayPlayer(NimPlayer[] players, Integer count, String user) 
	{
        for (int i = 0; i < count; i++ ) 
        {
        	if (players[i] != null) 
        	{
        		if ((user.isEmpty()) || (players[i].userName.equals(user))) 
        		{
        			System.out.println(players[i].userName + "," + players[i].name + "," + players[i].familyName  + ","  + players[i].gamesPlayd + " games," + players[i].gamesWon + " wins");	
        		}
        	}
        }
		
	}
	//UpdateGameStats: 	Update the game stats for the players who are playing 
	//					and recalc the player's ranking.
	public static NimPlayer[] UpdateGameStats(NimPlayer[] players, Integer count, NimPlayer player) 
	{
		Boolean found = false;
		int i = 0;
	
        while (!found) {
        	if (players[i].userName.equals(player.userName)) 
        	{
        		players[i].gamesPlayd = player.gamesPlayd + 1 ;
        		players[i].rank =  (double) Math.round(((double) player.gamesWon/(double) player.gamesPlayd * 100));
        		found = true;
        	}    
        	i++;
        }
        return players;
		
	}
	//UpdateWonStats: Update the stats for the Winner and recalc rankings
	public static NimPlayer[] UpdateWonStats(NimPlayer[] players, Integer count, NimPlayer winner) 
	{
		Boolean found = false;
		int i = 0;
        while (!found) 
        {
        	if (players[i].userName.equals(winner.userName)) 
        	{
        		found = true;
        		players[i].gamesWon = winner.gamesWon + 1;
        		players[i].rank = (double) Math.round(((double) winner.gamesWon/(double) winner.gamesPlayd * 100));
        	}
        	i++;
        }
        return players;
	}
	//RankSort sorts players by ranking, in either ascending or descending order
	public static NimPlayer[] RankSort(NimPlayer[] players, Integer count) 
	{
		for (int i = 0; i < count-1; i++) {
			for (int j = 1; j < count - i; j++ ) {
				if (players[j-1].rank.compareTo(players[j].rank) < 0) 
				{
					SwapPlayer(players,j, j-1);
				}
				if (players[j-1].rank.compareTo(players[j].rank) == 0) 
				{
					if (players[j].userName.compareTo(players[j-1].userName) < 0)
					SwapPlayer(players,j, j-1);
				}
			}
		}
		return players;
		
	}
	//DisplaySort: Sort them in alphabetical order
	public static NimPlayer[] DisplaySort(NimPlayer[] players, Integer count) 
	{
		for (int i = 0; i < count-1; i++) 
		{
			for (int j = 1; j < count - i; j++ ) 
			{
				if (players[j].userName.compareTo(players[j-1].userName) < 0) 
				{
					SwapPlayer(players,j, j-1);
				}
			}
		}
		return players;
		
	}
	//Insert: Insert player into player array, used to do in alphabetical order
	private static NimPlayer[] Insert(NimPlayer[] players, Integer count, NimPlayer insPlayer, Integer index) 
	{
		for (int i = count; i > index; i-- ) 
		{
			players[i] = players[i-1];		
		}
		players[index] = insPlayer;
		return players;
	}
	//SwapPlayer: SwapPlayer used in sorting
	private static NimPlayer[] SwapPlayer(NimPlayer[] players, int indexTo, int indexFrom) 
	{
			NimPlayer Temp = players[indexFrom];
			players[indexFrom] = players[indexTo];
			players[indexTo] = Temp;
		return players;
	}
}
============================================
src/Testable.java
21:55:37_Thursday_25_May_2017
============================================
/*
	Testable.java
	
	This class is provided for auto-testing purpose. Do NOT change it. 
	
	Coded by: Jin Huang
	Modified by: Jianzhong Qi, 29/04/2015
*/

public interface Testable {
	public String advancedMove(boolean[] available, String lastMove);
}

